---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import dayjs from "dayjs";
import isNil from "lodash/isNil";
import isEmpty from "lodash/isEmpty";

interface Props {
  blog: CollectionEntry<"blogs">;
}

export async function getStaticPaths() {
  const blogPosts = await getCollection("blogs");
  return blogPosts.map((blog: any) => ({
    params: { slug: blog.slug },
    props: { blog },
  }));
}
const { blog } = Astro.props;
const { Content } = await blog.render();
const hasCaption =
  !isNil(blog.data.coverCaption) && !isEmpty(blog.data.coverCaption);
---

<Layout title={blog.data.title}>
  <div class="w-full px-4">
    <div class="mt-5 md:mt-16 mb-10 md:mb-10">
      <div class="flex justify-center m-auto">
        <figure
          class="cover-grid relative bg-base-300 rounded-2xl border-neutral border md:max-w-4xl shadow-2xl overflow-hidden"
        >
          <Image
            src={blog.data.cover}
            alt={blog.data.title}
            class="object-cover object-center !m-0 aspect-video block rounded-2xl shadow-2xl"
          />
          {
            hasCaption && (
              <span class="badge badge-outline select-none bg-base-100 shadow-xl truncate max-w-full block m-2">
                {blog.data.coverCaption}
              </span>
            )
          }
        </figure>
      </div>
    </div>

    <article class="prose mx-auto">
      <h1 class="md:!text-5xl md:!leading-[1.2] font-medium mb-0">
        {blog.data.title}
      </h1>
      <span class="divider m-0"></span>
      <time>{dayjs(blog.data.date).format("MMMM DD, YYYY")}</time>
      <p class="lead">{blog.data.description}</p>
      <Content />
    </article>
    <span class="h-52"></span>
  </div>
</Layout>

<style>
  .cover-grid {
    display: grid;
  }

  .cover-grid img {
    grid-area: 1 / 2;
  }
  .cover-grid span.badge {
    grid-area: 1 / 2;
    align-self: end;
  }
</style>
